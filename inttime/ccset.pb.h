// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ccset.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ccset_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ccset_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ccset_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ccset_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ccset_2eproto;
namespace ccset {
class ccset_data;
class ccset_dataDefaultTypeInternal;
extern ccset_dataDefaultTypeInternal _ccset_data_default_instance_;
class ccset_data_darr;
class ccset_data_darrDefaultTypeInternal;
extern ccset_data_darrDefaultTypeInternal _ccset_data_darr_default_instance_;
}  // namespace ccset
PROTOBUF_NAMESPACE_OPEN
template<> ::ccset::ccset_data* Arena::CreateMaybeMessage<::ccset::ccset_data>(Arena*);
template<> ::ccset::ccset_data_darr* Arena::CreateMaybeMessage<::ccset::ccset_data_darr>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ccset {

// ===================================================================

class ccset_data_darr PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccset.ccset_data.darr) */ {
 public:
  inline ccset_data_darr() : ccset_data_darr(nullptr) {};
  virtual ~ccset_data_darr();

  ccset_data_darr(const ccset_data_darr& from);
  ccset_data_darr(ccset_data_darr&& from) noexcept
    : ccset_data_darr() {
    *this = ::std::move(from);
  }

  inline ccset_data_darr& operator=(const ccset_data_darr& from) {
    CopyFrom(from);
    return *this;
  }
  inline ccset_data_darr& operator=(ccset_data_darr&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ccset_data_darr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ccset_data_darr* internal_default_instance() {
    return reinterpret_cast<const ccset_data_darr*>(
               &_ccset_data_darr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ccset_data_darr& a, ccset_data_darr& b) {
    a.Swap(&b);
  }
  inline void Swap(ccset_data_darr* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ccset_data_darr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ccset_data_darr* New() const final {
    return CreateMaybeMessage<ccset_data_darr>(nullptr);
  }

  ccset_data_darr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ccset_data_darr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ccset_data_darr& from);
  void MergeFrom(const ccset_data_darr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ccset_data_darr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccset.ccset_data.darr";
  }
  protected:
  explicit ccset_data_darr(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ccset_2eproto);
    return ::descriptor_table_ccset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrFieldNumber = 1,
  };
  // repeated int64 arr = 1;
  int arr_size() const;
  private:
  int _internal_arr_size() const;
  public:
  void clear_arr();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_arr(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_arr() const;
  void _internal_add_arr(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_arr();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 arr(int index) const;
  void set_arr(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_arr(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      arr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_arr();

  // @@protoc_insertion_point(class_scope:ccset.ccset_data.darr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > arr_;
  mutable std::atomic<int> _arr_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccset_2eproto;
};
// -------------------------------------------------------------------

class ccset_data PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccset.ccset_data) */ {
 public:
  inline ccset_data() : ccset_data(nullptr) {};
  virtual ~ccset_data();

  ccset_data(const ccset_data& from);
  ccset_data(ccset_data&& from) noexcept
    : ccset_data() {
    *this = ::std::move(from);
  }

  inline ccset_data& operator=(const ccset_data& from) {
    CopyFrom(from);
    return *this;
  }
  inline ccset_data& operator=(ccset_data&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ccset_data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ccset_data* internal_default_instance() {
    return reinterpret_cast<const ccset_data*>(
               &_ccset_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ccset_data& a, ccset_data& b) {
    a.Swap(&b);
  }
  inline void Swap(ccset_data* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ccset_data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ccset_data* New() const final {
    return CreateMaybeMessage<ccset_data>(nullptr);
  }

  ccset_data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ccset_data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ccset_data& from);
  void MergeFrom(const ccset_data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ccset_data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccset.ccset_data";
  }
  protected:
  explicit ccset_data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ccset_2eproto);
    return ::descriptor_table_ccset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ccset_data_darr darr;

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetsFieldNumber = 1,
    kCcHFieldNumber = 2,
    kCcVFieldNumber = 3,
    kCcHTagsFieldNumber = 4,
    kCcVTagsFieldNumber = 5,
    kMeastimeFieldNumber = 6,
  };
  // repeated int64 offsets = 1;
  int offsets_size() const;
  private:
  int _internal_offsets_size() const;
  public:
  void clear_offsets();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offsets(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_offsets() const;
  void _internal_add_offsets(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_offsets();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 offsets(int index) const;
  void set_offsets(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_offsets(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      offsets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_offsets();

  // repeated int64 cc_h = 2;
  int cc_h_size() const;
  private:
  int _internal_cc_h_size() const;
  public:
  void clear_cc_h();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_cc_h(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_cc_h() const;
  void _internal_add_cc_h(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_cc_h();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 cc_h(int index) const;
  void set_cc_h(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_cc_h(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      cc_h() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_cc_h();

  // repeated int64 cc_v = 3;
  int cc_v_size() const;
  private:
  int _internal_cc_v_size() const;
  public:
  void clear_cc_v();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_cc_v(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_cc_v() const;
  void _internal_add_cc_v(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_cc_v();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 cc_v(int index) const;
  void set_cc_v(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_cc_v(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      cc_v() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_cc_v();

  // repeated .ccset.ccset_data.darr cc_h_tags = 4;
  int cc_h_tags_size() const;
  private:
  int _internal_cc_h_tags_size() const;
  public:
  void clear_cc_h_tags();
  ::ccset::ccset_data_darr* mutable_cc_h_tags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccset::ccset_data_darr >*
      mutable_cc_h_tags();
  private:
  const ::ccset::ccset_data_darr& _internal_cc_h_tags(int index) const;
  ::ccset::ccset_data_darr* _internal_add_cc_h_tags();
  public:
  const ::ccset::ccset_data_darr& cc_h_tags(int index) const;
  ::ccset::ccset_data_darr* add_cc_h_tags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccset::ccset_data_darr >&
      cc_h_tags() const;

  // repeated .ccset.ccset_data.darr cc_v_tags = 5;
  int cc_v_tags_size() const;
  private:
  int _internal_cc_v_tags_size() const;
  public:
  void clear_cc_v_tags();
  ::ccset::ccset_data_darr* mutable_cc_v_tags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccset::ccset_data_darr >*
      mutable_cc_v_tags();
  private:
  const ::ccset::ccset_data_darr& _internal_cc_v_tags(int index) const;
  ::ccset::ccset_data_darr* _internal_add_cc_v_tags();
  public:
  const ::ccset::ccset_data_darr& cc_v_tags(int index) const;
  ::ccset::ccset_data_darr* add_cc_v_tags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccset::ccset_data_darr >&
      cc_v_tags() const;

  // double meastime = 6;
  void clear_meastime();
  double meastime() const;
  void set_meastime(double value);
  private:
  double _internal_meastime() const;
  void _internal_set_meastime(double value);
  public:

  // @@protoc_insertion_point(class_scope:ccset.ccset_data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > offsets_;
  mutable std::atomic<int> _offsets_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > cc_h_;
  mutable std::atomic<int> _cc_h_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > cc_v_;
  mutable std::atomic<int> _cc_v_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccset::ccset_data_darr > cc_h_tags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccset::ccset_data_darr > cc_v_tags_;
  double meastime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccset_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ccset_data_darr

// repeated int64 arr = 1;
inline int ccset_data_darr::_internal_arr_size() const {
  return arr_.size();
}
inline int ccset_data_darr::arr_size() const {
  return _internal_arr_size();
}
inline void ccset_data_darr::clear_arr() {
  arr_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ccset_data_darr::_internal_arr(int index) const {
  return arr_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ccset_data_darr::arr(int index) const {
  // @@protoc_insertion_point(field_get:ccset.ccset_data.darr.arr)
  return _internal_arr(index);
}
inline void ccset_data_darr::set_arr(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  arr_.Set(index, value);
  // @@protoc_insertion_point(field_set:ccset.ccset_data.darr.arr)
}
inline void ccset_data_darr::_internal_add_arr(::PROTOBUF_NAMESPACE_ID::int64 value) {
  arr_.Add(value);
}
inline void ccset_data_darr::add_arr(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_arr(value);
  // @@protoc_insertion_point(field_add:ccset.ccset_data.darr.arr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ccset_data_darr::_internal_arr() const {
  return arr_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ccset_data_darr::arr() const {
  // @@protoc_insertion_point(field_list:ccset.ccset_data.darr.arr)
  return _internal_arr();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ccset_data_darr::_internal_mutable_arr() {
  return &arr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ccset_data_darr::mutable_arr() {
  // @@protoc_insertion_point(field_mutable_list:ccset.ccset_data.darr.arr)
  return _internal_mutable_arr();
}

// -------------------------------------------------------------------

// ccset_data

// repeated int64 offsets = 1;
inline int ccset_data::_internal_offsets_size() const {
  return offsets_.size();
}
inline int ccset_data::offsets_size() const {
  return _internal_offsets_size();
}
inline void ccset_data::clear_offsets() {
  offsets_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ccset_data::_internal_offsets(int index) const {
  return offsets_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ccset_data::offsets(int index) const {
  // @@protoc_insertion_point(field_get:ccset.ccset_data.offsets)
  return _internal_offsets(index);
}
inline void ccset_data::set_offsets(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  offsets_.Set(index, value);
  // @@protoc_insertion_point(field_set:ccset.ccset_data.offsets)
}
inline void ccset_data::_internal_add_offsets(::PROTOBUF_NAMESPACE_ID::int64 value) {
  offsets_.Add(value);
}
inline void ccset_data::add_offsets(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_offsets(value);
  // @@protoc_insertion_point(field_add:ccset.ccset_data.offsets)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ccset_data::_internal_offsets() const {
  return offsets_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ccset_data::offsets() const {
  // @@protoc_insertion_point(field_list:ccset.ccset_data.offsets)
  return _internal_offsets();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ccset_data::_internal_mutable_offsets() {
  return &offsets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ccset_data::mutable_offsets() {
  // @@protoc_insertion_point(field_mutable_list:ccset.ccset_data.offsets)
  return _internal_mutable_offsets();
}

// repeated int64 cc_h = 2;
inline int ccset_data::_internal_cc_h_size() const {
  return cc_h_.size();
}
inline int ccset_data::cc_h_size() const {
  return _internal_cc_h_size();
}
inline void ccset_data::clear_cc_h() {
  cc_h_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ccset_data::_internal_cc_h(int index) const {
  return cc_h_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ccset_data::cc_h(int index) const {
  // @@protoc_insertion_point(field_get:ccset.ccset_data.cc_h)
  return _internal_cc_h(index);
}
inline void ccset_data::set_cc_h(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  cc_h_.Set(index, value);
  // @@protoc_insertion_point(field_set:ccset.ccset_data.cc_h)
}
inline void ccset_data::_internal_add_cc_h(::PROTOBUF_NAMESPACE_ID::int64 value) {
  cc_h_.Add(value);
}
inline void ccset_data::add_cc_h(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_cc_h(value);
  // @@protoc_insertion_point(field_add:ccset.ccset_data.cc_h)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ccset_data::_internal_cc_h() const {
  return cc_h_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ccset_data::cc_h() const {
  // @@protoc_insertion_point(field_list:ccset.ccset_data.cc_h)
  return _internal_cc_h();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ccset_data::_internal_mutable_cc_h() {
  return &cc_h_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ccset_data::mutable_cc_h() {
  // @@protoc_insertion_point(field_mutable_list:ccset.ccset_data.cc_h)
  return _internal_mutable_cc_h();
}

// repeated int64 cc_v = 3;
inline int ccset_data::_internal_cc_v_size() const {
  return cc_v_.size();
}
inline int ccset_data::cc_v_size() const {
  return _internal_cc_v_size();
}
inline void ccset_data::clear_cc_v() {
  cc_v_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ccset_data::_internal_cc_v(int index) const {
  return cc_v_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ccset_data::cc_v(int index) const {
  // @@protoc_insertion_point(field_get:ccset.ccset_data.cc_v)
  return _internal_cc_v(index);
}
inline void ccset_data::set_cc_v(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  cc_v_.Set(index, value);
  // @@protoc_insertion_point(field_set:ccset.ccset_data.cc_v)
}
inline void ccset_data::_internal_add_cc_v(::PROTOBUF_NAMESPACE_ID::int64 value) {
  cc_v_.Add(value);
}
inline void ccset_data::add_cc_v(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_cc_v(value);
  // @@protoc_insertion_point(field_add:ccset.ccset_data.cc_v)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ccset_data::_internal_cc_v() const {
  return cc_v_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ccset_data::cc_v() const {
  // @@protoc_insertion_point(field_list:ccset.ccset_data.cc_v)
  return _internal_cc_v();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ccset_data::_internal_mutable_cc_v() {
  return &cc_v_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ccset_data::mutable_cc_v() {
  // @@protoc_insertion_point(field_mutable_list:ccset.ccset_data.cc_v)
  return _internal_mutable_cc_v();
}

// repeated .ccset.ccset_data.darr cc_h_tags = 4;
inline int ccset_data::_internal_cc_h_tags_size() const {
  return cc_h_tags_.size();
}
inline int ccset_data::cc_h_tags_size() const {
  return _internal_cc_h_tags_size();
}
inline void ccset_data::clear_cc_h_tags() {
  cc_h_tags_.Clear();
}
inline ::ccset::ccset_data_darr* ccset_data::mutable_cc_h_tags(int index) {
  // @@protoc_insertion_point(field_mutable:ccset.ccset_data.cc_h_tags)
  return cc_h_tags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccset::ccset_data_darr >*
ccset_data::mutable_cc_h_tags() {
  // @@protoc_insertion_point(field_mutable_list:ccset.ccset_data.cc_h_tags)
  return &cc_h_tags_;
}
inline const ::ccset::ccset_data_darr& ccset_data::_internal_cc_h_tags(int index) const {
  return cc_h_tags_.Get(index);
}
inline const ::ccset::ccset_data_darr& ccset_data::cc_h_tags(int index) const {
  // @@protoc_insertion_point(field_get:ccset.ccset_data.cc_h_tags)
  return _internal_cc_h_tags(index);
}
inline ::ccset::ccset_data_darr* ccset_data::_internal_add_cc_h_tags() {
  return cc_h_tags_.Add();
}
inline ::ccset::ccset_data_darr* ccset_data::add_cc_h_tags() {
  // @@protoc_insertion_point(field_add:ccset.ccset_data.cc_h_tags)
  return _internal_add_cc_h_tags();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccset::ccset_data_darr >&
ccset_data::cc_h_tags() const {
  // @@protoc_insertion_point(field_list:ccset.ccset_data.cc_h_tags)
  return cc_h_tags_;
}

// repeated .ccset.ccset_data.darr cc_v_tags = 5;
inline int ccset_data::_internal_cc_v_tags_size() const {
  return cc_v_tags_.size();
}
inline int ccset_data::cc_v_tags_size() const {
  return _internal_cc_v_tags_size();
}
inline void ccset_data::clear_cc_v_tags() {
  cc_v_tags_.Clear();
}
inline ::ccset::ccset_data_darr* ccset_data::mutable_cc_v_tags(int index) {
  // @@protoc_insertion_point(field_mutable:ccset.ccset_data.cc_v_tags)
  return cc_v_tags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccset::ccset_data_darr >*
ccset_data::mutable_cc_v_tags() {
  // @@protoc_insertion_point(field_mutable_list:ccset.ccset_data.cc_v_tags)
  return &cc_v_tags_;
}
inline const ::ccset::ccset_data_darr& ccset_data::_internal_cc_v_tags(int index) const {
  return cc_v_tags_.Get(index);
}
inline const ::ccset::ccset_data_darr& ccset_data::cc_v_tags(int index) const {
  // @@protoc_insertion_point(field_get:ccset.ccset_data.cc_v_tags)
  return _internal_cc_v_tags(index);
}
inline ::ccset::ccset_data_darr* ccset_data::_internal_add_cc_v_tags() {
  return cc_v_tags_.Add();
}
inline ::ccset::ccset_data_darr* ccset_data::add_cc_v_tags() {
  // @@protoc_insertion_point(field_add:ccset.ccset_data.cc_v_tags)
  return _internal_add_cc_v_tags();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccset::ccset_data_darr >&
ccset_data::cc_v_tags() const {
  // @@protoc_insertion_point(field_list:ccset.ccset_data.cc_v_tags)
  return cc_v_tags_;
}

// double meastime = 6;
inline void ccset_data::clear_meastime() {
  meastime_ = 0;
}
inline double ccset_data::_internal_meastime() const {
  return meastime_;
}
inline double ccset_data::meastime() const {
  // @@protoc_insertion_point(field_get:ccset.ccset_data.meastime)
  return _internal_meastime();
}
inline void ccset_data::_internal_set_meastime(double value) {
  
  meastime_ = value;
}
inline void ccset_data::set_meastime(double value) {
  _internal_set_meastime(value);
  // @@protoc_insertion_point(field_set:ccset.ccset_data.meastime)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ccset

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ccset_2eproto
