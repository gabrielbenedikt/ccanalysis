cmake_minimum_required(VERSION 3.9 FATAL_ERROR)
   project(ccanalysis)
   
   set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
   
   option(CLANG_TIDY "analyze code with clang-tidy (all checks enabled)" OFF)
   if(CLANG_TIDY)
      set(CMAKE_CXX_CLANG_TIDY clang-tidy; -checks=*;)
   endif(CLANG_TIDY)
   
   set(default_build_type "Release")
      if(CMAKE_BUILD_TYPE STREQUAL "")
         message(STATUS "Build type not specified. defaulting to '${default_build_type}")
         set(CMAKE_BUILD_TYPE "${default_build_type}")
      endif()
   option(ASAN "Enable compiler sanitizer options" OFF)
   
   #if(CMAKE_BUILD_TYPE STREQUAL "Debug")
   if(ASAN)
      message(STATUS "ASAN build")
      add_compile_options("-fsanitize=address")
      add_compile_options("-fsanitize=leak")
      add_compile_options("-fsanitize=undefined")
      add_compile_options("-fno-sanitize-recover=all")
      add_compile_options("-fsanitize=float-divide-by-zero")
      add_compile_options("-fno-sanitize=null")
      add_compile_options("-fno-sanitize=alignment")
      add_compile_options("-fsanitize=float-cast-overflow")
      add_compile_options("-fsanitize-address-use-after-scope")
      add_compile_options("-fstack-protector-all")
      add_compile_options("-fharden-compares")
      add_compile_options("-fharden-conditional-branches")
      add_compile_options("-fstack-check")
      link_libraries("-fsanitize=address -fsanitize=leak -fsanitize=undefined -fsanitize-address-use-after-scope -fstack-protector-all -fharden-compares -fharden-conditional-branches -fstack-check -fno-sanitize-recover=all -fno-sanitize=alignment -fno-sanitize=null -fsanitize=float-divide-by-zero -fsanitize=float-cast-overflow")
      add_link_options(-fsanitize=address)
   endif()

   if(NOT CMAKE_DEBUG_POSTFIX)
      set(CMAKE_DEBUG_POSTFIX d)
   endif()
   if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
      set(CMAKE_C_FLAGS "-Wall -Wextra")
      set(CMAKE_C_FLAGS_DEBUG "-Og -g -ggdb")
      set(CMAKE_C_FLAGS_RELEASE "-Werror -pipe -O3 -march=native -fomit-frame-pointer -fno-signaling-nans -fno-trapping-math -ftree-vectorize")
      set(CMAKE_C_FLAGS_MinSizeRel "-Werror -pipe -Os -march=native -fomit-frame-pointer -fno-signaling-nans -fno-trapping-math -ftree-vectorize")
      set(CMAKE_C_FLAGS_RelWithDebInfo "-Werror -pipe -g -O3 -march=native -fomit-frame-pointer -fno-signaling-nans -fno-trapping-math -ftree-vectorize")
      
      set(CMAKE_CXX_FLAGS ${CMAKE_C_FLAGS})
      set(CMAKE_CXX_FLAGS_DEBUG ${CMAKE_C_FLAGS_DEBUG})
      set(CMAKE_CXX_FLAGS_RELEASE ${CMAKE_C_FLAGS_RELEASE})
      set(CMAKE_CXX_FLAGS_MinSizeRel ${CMAKE_C_FLAGS_MinSizeRel})
      set(CMAKE_CXX_FLAGS_RelWithDebInfo ${CMAKE_C_FLAGS_RelWithDebInfo})
      
   elseif (CMAKE_CXX_COMPILER_ID STREQUAL "Intel")
      set(CMAKE_C_FLAGS "-Wall -Wextra")
      set(CMAKE_C_FLAGS_DEBUG "-Og -g -ggdb")
      set(CMAKE_C_FLAGS_RELEASE "-Werror -pipe -O3 -march=native -ipo -fomit-frame-pointer -fno-signaling-nans -fno-trapping-math -ftree-vectorize")
      set(CMAKE_C_FLAGS_MinSizeRel "-Werror -pipe -Os -march=native -ipo -fomit-frame-pointer -fno-signaling-nans -fno-trapping-math -ftree-vectorize")
      set(CMAKE_C_FLAGS_RelWithDebInfo "-Werror -pipe -g -O3 -march=native -ipo -fomit-frame-pointer -fno-signaling-nans -fno-trapping-math -ftree-vectorize")
      
      set(CMAKE_CXX_FLAGS ${CMAKE_C_FLAGS})
      set(CMAKE_CXX_FLAGS_DEBUG ${CMAKE_C_FLAGS_DEBUG})
      set(CMAKE_CXX_FLAGS_RELEASE ${CMAKE_C_FLAGS_RELEASE})
      set(CMAKE_CXX_FLAGS_MinSizeRel ${CMAKE_C_FLAGS_MinSizeRel})
      set(CMAKE_CXX_FLAGS_RelWithDebInfo ${CMAKE_C_FLAGS_RelWithDebInfo})
   endif()
   
   file(GLOB SOURCES src/*.cpp src/*.cc)
   file(GLOB HISTOGRAM_SOURCES src/histogram.cpp src/schemes/histogramset.pb.cc src/schemes/ccset.pb.cc src/tools.cpp src/io.cpp ${CAPNP_SRCS})
   file(GLOB TSV2HDF_SOURCES src/tsv2hdf.cpp src/io.cpp src/tools.cpp ${CAPNP_SRCS})
   file(GLOB HDF2TSV_SOURCES src/hdf2tsv.cpp src/io.cpp src/tools.cpp ${CAPNP_SRCS})
   file(GLOB CAP2TSV_SOURCES src/cap2tsv.cpp src/io.cpp src/tools.cpp ${CAPNP_SRCS})
   file(GLOB TSV2CAP_SOURCES src/tsv2cap.cpp src/io.cpp src/tools.cpp ${CAPNP_SRCS})
   find_package(HDF5 REQUIRED COMPONENTS C CXX)
   find_package(Boost 1.70 COMPONENTS program_options iostreams REQUIRED)
   find_package(OpenMP REQUIRED)
   find_package(Protobuf REQUIRED)
   find_package(CapnProto)
   find_package(fmt REQUIRED)
   
   set(CAPNPC_OUTPUT_DIR ${CMAKE_CURRENT_LIST_DIR}/src)
   capnp_generate_cpp(CAPNP_SRCS CAPNP_HDRS schemes/tags.capnp)
   include_directories(${HDF5_INCLUDE_DIRS})
   include_directories("src/schemes")
   
   add_executable(histogram ${HISTOGRAM_SOURCES})
   set_property(TARGET histogram PROPERTY CXX_STANDARD 20)
   target_link_libraries(histogram ${HDF5_HL_LIBRARIES} ${HDF5_CXX_LIBRARIES} ${HDF5_LIBRARIES} ${PROTOBUF_LIBRARY} ${Boost_LIBRARIES} CapnProto::capnp fmt::fmt OpenMP::OpenMP_CXX)
   target_include_directories(histogram PUBLIC ${HDF5_INCLUDE_DIRS} ${Boost_INCLUDE_DIR})
   
   add_executable(tsv2hdf ${TSV2HDF_SOURCES})
   set_property(TARGET tsv2hdf PROPERTY CXX_STANDARD 20)
   target_link_libraries(tsv2hdf ${HDF5_HL_LIBRARIES} ${HDF5_CXX_LIBRARIES} ${HDF5_LIBRARIES} ${Boost_LIBRARIES} CapnProto::capnp fmt::fmt OpenMP::OpenMP_CXX)
   target_include_directories(tsv2hdf PUBLIC ${HDF5_INCLUDE_DIRS} ${Boost_INCLUDE_DIR})
   
   add_executable(hdf2tsv ${HDF2TSV_SOURCES})
   set_property(TARGET hdf2tsv PROPERTY CXX_STANDARD 20)
   target_link_libraries(hdf2tsv ${HDF5_HL_LIBRARIES} ${HDF5_CXX_LIBRARIES} ${HDF5_LIBRARIES} ${Boost_LIBRARIES} CapnProto::capnp fmt::fmt OpenMP::OpenMP_CXX)
   target_include_directories(hdf2tsv PUBLIC ${HDF5_INCLUDE_DIRS} ${Boost_INCLUDE_DIR})
   
   add_executable(cap2tsv ${CAP2TSV_SOURCES})
   set_property(TARGET cap2tsv PROPERTY CXX_STANDARD 20)
   target_link_libraries(cap2tsv ${HDF5_HL_LIBRARIES} ${HDF5_CXX_LIBRARIES} ${HDF5_LIBRARIES} ${Boost_LIBRARIES} CapnProto::capnp fmt::fmt OpenMP::OpenMP_CXX)
   target_include_directories(cap2tsv PUBLIC ${HDF5_INCLUDE_DIRS} ${Boost_INCLUDE_DIR})
   
   add_executable(tsv2cap ${TSV2CAP_SOURCES})
   set_property(TARGET tsv2cap PROPERTY CXX_STANDARD 20)
   target_link_libraries(tsv2cap ${HDF5_HL_LIBRARIES} ${HDF5_CXX_LIBRARIES} ${HDF5_LIBRARIES} ${Boost_LIBRARIES} CapnProto::capnp fmt::fmt OpenMP::OpenMP_CXX)
   target_include_directories(tsv2cap PUBLIC ${HDF5_INCLUDE_DIRS} ${Boost_INCLUDE_DIR})
   
   if (CMAKE_BUILD_TYPE STREQUAL "RELEASE")
      include(CheckIPOSupported)
      check_ipo_supported(RESULT hasipo OUTPUT error)
      if( hasipo )
         message(STATUS "IPO / LTO enabled")
         set_property(TARGET histogram PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)
         set_property(TARGET tsv2hdf PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)
         set_property(TARGET hdf2tsv PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)
         set_property(TARGET cap2tsv PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)
         set_property(TARGET tsv2cap PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)
      else()
         message(STATUS "IPO / LTO not supported: <${error}>")
      endif()
   endif (CMAKE_BUILD_TYPE STREQUAL "RELEASE")
      
   message(STATUS "INCLUDE LOCATION" ${HDF5_INCLUDE_DIRS})
   message(STATUS "version" ${HDF5_VERSION})
   message(STATUS "DEFINITIONS" ${HDF5_DEFINITIONS})
   message(STATUS "LIBRARIES" ${HDF5_LIBRARIES})
   message(STATUS "HL_LIBRARIES" ${HDF5_HL_LIBRARIES})
