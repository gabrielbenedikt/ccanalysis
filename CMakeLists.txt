cmake_minimum_required(VERSION 3.9 FATAL_ERROR)
   project(rewinding_ccanalysis)

   set(CMAKE_BUILD_TYPE RELEASE)
   
   if(NOT CMAKE_DEBUG_POSTFIX)
      set(CMAKE_DEBUG_POSTFIX d)
   endif()
   if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
      set(CMAKE_C_FLAGS "-Wall -Wextra")
      set(CMAKE_C_FLAGS_DEBUG "-O0 -g -ggdb")
      set(CMAKE_C_FLAGS_RELEASE "-Werror -pipe -g -O3 -march=native -fomit-frame-pointer -fno-signaling-nans -fno-trapping-math -ftree-vectorize -fopt-info-vec-missed=vec.opt")
      set(CMAKE_CXX_FLAGS "-Wall -Wextra")
      set(CMAKE_CXX_FLAGS_DEBUG "-O0 -g -ggdb")
      set(CMAKE_CXX_FLAGS_RELEASE "-Werror -pipe -g -O3 -march=native -fomit-frame-pointer -fno-signaling-nans -fno-trapping-math -ftree-vectorize -fopt-info-vec-missed=vec.opt")
   elseif (CMAKE_CXX_COMPILER_ID STREQUAL "Intel")
      set(CMAKE_C_FLAGS "-Wall -Wextra")
      set(CMAKE_C_FLAGS_DEBUG "-O0 -g -ggdb")
      set(CMAKE_C_FLAGS_RELEASE "-Werror -pipe -g -O3 -march=native -ipo -fomit-frame-pointer -fno-signaling-nans -fno-trapping-math -ftree-vectorize")
      set(CMAKE_CXX_FLAGS "-Wall -Wextra")
      set(CMAKE_CXX_FLAGS_DEBUG "-O0 -g -ggdb")
      set(CMAKE_CXX_FLAGS_RELEASE "-Werror -pipe -g -O3 -march=native -ipo -fomit-frame-pointer -fno-signaling-nans -fno-trapping-math -ftree-vectorize")
   endif()
   
   include_directories(${HDF5_INCLUDE_DIRS})

   find_package(HDF5 REQUIRED COMPONENTS C CXX)
   find_package(Boost 1.74 COMPONENTS program_options REQUIRED)
   find_package(OpenMP REQUIRED)
   find_package(Protobuf REQUIRED)
   find_package(TBB REQUIRED tbb)

   add_executable(rewinding_ccanalysis rewinding_ccanalysis.cpp ccset.pb.cc tools.cpp io.cpp)
   set_property(TARGET rewinding_ccanalysis PROPERTY CXX_STANDARD 20)
   target_link_libraries(rewinding_ccanalysis ${HDF5_HL_LIBRARIES} ${HDF5_CXX_LIBRARIES} ${HDF5_LIBRARIES} ${PROTOBUF_LIBRARY} ${Boost_LIBRARIES} ${TBB_IMPORTED_TARGETS} OpenMP::OpenMP_CXX)
   target_include_directories(rewinding_ccanalysis PUBLIC ${HDF5_INCLUDE_DIRS} ${Boost_INCLUDE_DIR})

   add_executable(tsv2hdf tsv2hdf.cpp io.cpp tools.cpp)
   set_property(TARGET tsv2hdf PROPERTY CXX_STANDARD 20)
   target_link_libraries(tsv2hdf ${HDF5_HL_LIBRARIES} ${HDF5_CXX_LIBRARIES} ${HDF5_LIBRARIES} ${Boost_LIBRARIES} OpenMP::OpenMP_CXX)
   target_include_directories(tsv2hdf PUBLIC ${HDF5_INCLUDE_DIRS} ${Boost_INCLUDE_DIR})
   
   add_executable(hdf2tsv hdf2tsv.cpp io.cpp tools.cpp)
   set_property(TARGET hdf2tsv PROPERTY CXX_STANDARD 20)
   target_link_libraries(hdf2tsv ${HDF5_HL_LIBRARIES} ${HDF5_CXX_LIBRARIES} ${HDF5_LIBRARIES} ${Boost_LIBRARIES} OpenMP::OpenMP_CXX)
   target_include_directories(hdf2tsv PUBLIC ${HDF5_INCLUDE_DIRS} ${Boost_INCLUDE_DIR})
   
   
   
   include(CheckIPOSupported)
   check_ipo_supported(RESULT hasipo OUTPUT error)
   if( hasipo )
      message(STATUS "IPO / LTO enabled")
      set_property(TARGET rewinding_ccanalysis PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)
      set_property(TARGET tsv2hdf PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)
   else()
      message(STATUS "IPO / LTO not supported: <${error}>")
   endif()
      
   message(STATUS "INCLUDE LOCATION" ${HDF5_INCLUDE_DIRS})
   message(STATUS "version" ${HDF5_VERSION})
   message(STATUS "DEFINITIONS" ${HDF5_DEFINITIONS})
   message(STATUS "LIBRARIES" ${HDF5_LIBRARIES})
   message(STATUS "HL_LIBRARIES" ${HDF5_HL_LIBRARIES})
