cmake_minimum_required(VERSION 3.9 FATAL_ERROR)
   project(ccanalysis)

   set(CMAKE_BUILD_TYPE RELEASE)
   
   if(NOT CMAKE_DEBUG_POSTFIX)
      set(CMAKE_DEBUG_POSTFIX d)
   endif()
   if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
      set(CMAKE_C_FLAGS "-Wall -Wextra")
      set(CMAKE_C_FLAGS_DEBUG "-O0 -g -ggdb")
      set(CMAKE_C_FLAGS_RELEASE "-Werror -pipe -g -O3 -march=native -fomit-frame-pointer -fno-signaling-nans -fno-trapping-math -ftree-vectorize -fopt-info-vec-missed=vec.opt")
      set(CMAKE_CXX_FLAGS "-Wall -Wextra")
      set(CMAKE_CXX_FLAGS_DEBUG "-O0 -g -ggdb")
      set(CMAKE_CXX_FLAGS_RELEASE "-Werror -pipe -g -O3 -march=native -fomit-frame-pointer -fno-signaling-nans -fno-trapping-math -ftree-vectorize -fopt-info-vec-missed=vec.opt")
   elseif (CMAKE_CXX_COMPILER_ID STREQUAL "Intel")
      set(CMAKE_C_FLAGS "-Wall -Wextra")
      set(CMAKE_C_FLAGS_DEBUG "-O0 -g -ggdb")
      set(CMAKE_C_FLAGS_RELEASE "-Werror -pipe -g -O3 -march=native -ipo -fomit-frame-pointer -fno-signaling-nans -fno-trapping-math -ftree-vectorize")
      set(CMAKE_CXX_FLAGS "-Wall -Wextra")
      set(CMAKE_CXX_FLAGS_DEBUG "-O0 -g -ggdb")
      set(CMAKE_CXX_FLAGS_RELEASE "-Werror -pipe -g -O3 -march=native -ipo -fomit-frame-pointer -fno-signaling-nans -fno-trapping-math -ftree-vectorize")
   endif()
   
   include_directories(${HDF5_INCLUDE_DIRS})

   find_package(HDF5 REQUIRED COMPONENTS C CXX)
   find_package(OpenMP REQUIRED)
   find_package(Protobuf REQUIRED)
   find_package(TBB REQUIRED tbb)

   add_executable(ccanalysis ccanalysis.cpp ccset.pb.cc)
   set_property(TARGET ccanalysis PROPERTY CXX_STANDARD 20)
   target_link_libraries(ccanalysis ${HDF5_HL_LIBRARIES} ${HDF5_CXX_LIBRARIES} ${HDF5_LIBRARIES} ${PROTOBUF_LIBRARY} ${TBB_IMPORTED_TARGETS} OpenMP::OpenMP_CXX)
   target_include_directories(ccanalysis PUBLIC ${HDF5_INCLUDE_DIRS})

   include(CheckIPOSupported)
   check_ipo_supported(RESULT hasipo OUTPUT error)
   if( hasipo )
      message(STATUS "IPO / LTO enabled")
      set_property(TARGET ccanalysis PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)
   else()
      message(STATUS "IPO / LTO not supported: <${error}>")
   endif()
      
   message(STATUS "INCLUDE LOCATION" ${HDF5_INCLUDE_DIRS})
   message(STATUS "version" ${HDF5_VERSION})
   message(STATUS "DEFINITIONS" ${HDF5_DEFINITIONS})
   message(STATUS "LIBRARIES" ${HDF5_LIBRARIES})
   message(STATUS "HL_LIBRARIES" ${HDF5_HL_LIBRARIES})
